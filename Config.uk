menuconfig LIBWILDE
			 bool "wilde: An OSCAR allocator"
			 select LIBNOLIBC if !HAVE_LIBC
			 select LIBUKDEBUG
			 select LIBUKALLOC
			 depends on (ARCH_X86_64 && PLAT_KVM)
			 default n
			 help
			 				An OSCAR paper implementation, using vmem mappings
			 				to ensure temporal safety

if (LIBWILDE)

menu "Debugging"

config LIBWILDE_ALLOC_DEBUG
			bool "Shows allocation and allocation mappings"
			default n
			help
				To help with debugging an application, it might be useful to know what 
				an application actually allocated etc. Therefore there's this flag that
				automatically prints all allocations

config LIBWILDE_DISABLE_INJECTION
			 bool "Stops injection"
			 default n
			 help
			 	 Injecting allocations is what Wilde is for, but if you're stuck during 
				 debugging, this turns off internals, while still allowing for the alloc
				 debug messages

config LIBWILDE_DEBUG
			 bool "Print all kinds of debug messages"
			 default n
			 help
			 	 Will help debug libwilde itself

config LIBWILDE_COLOR
			 bool "Enable ANSI-coloured messages"
			 default y 
			 help
			 		For easier debugging

endmenu

config LIBWILDE_SHAUN
			bool "Electric Sheep"
			default n
			help
				To help out with security, an additional feature is to put a guard page 
				behind every virtual memory allocation mapping. This essentially gives a 
				weak variant of overflow detection.
endif

